@model massive_moose.web.owin.Models.WallViewModel
@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Wall.cshtml";
}

@section stylesheets
{
    <link href="/content/literallycanvas.css" rel="stylesheet">
    <link href="/content/Wall.css" rel="stylesheet">
    <meta name="viewport" content="width=device-width,initial-scale=@System.Configuration.ConfigurationManager.AppSettings["ViewportScale"]"/>
    <style>
        .color {
	        padding: .5em;
	        margin-right: .4em;
	        border: 1px solid #aaa;
	        border-radius: 3px;
	        width: 140px;
        }
    </style>
}

@section scripts
{
    <!-- dependency: React.js -->
    <script src="/scripts/screenfull.js"></script>
    <script src="/scripts/literallycanvas/literallycanvas-core.min.js"></script>
    <script src="/scripts/mm.js"></script>
    <script src="/scripts/jsColorPicker.min.js"></script>
    <script type="text/javascript">
        MassiveMoose.initialize(
            {
                baseApiUrl: '@System.Configuration.ConfigurationManager.AppSettings["MMApi"]',
                drawZoom: @System.Configuration.ConfigurationManager.AppSettings["DrawZoom"],
                viewPortScaleWhenDrawing:
                    @System.Configuration.ConfigurationManager.AppSettings["ViewportScaleWhenDrawing"],
                viewPortScale: @System.Configuration.ConfigurationManager.AppSettings["ViewportScale"],
                inviteCode: '@Model.InviteCode',
                toolbarShowDelay: 300
            }
        );
    </script>
    <script type="text/javascript">
        var primaryPicker= jsColorPicker('input.primaryColor',
        {
            customBG: '#222',
            readOnly: true,
            // patch: false,
            init: function(elm, colors) { // colors is a different instance (not connected to colorPicker)
                elm.style.backgroundColor = elm.value;
                elm.style.color = colors.rgbaMixCustom.luminance > 0.22 ? '#222' : '#ddd';
            },
            actionCallback: function(event, type) {
                if (type === 'changeXYValue') { // overwriting right after repaint...
                    var hslaString = 'hsla(' +
                        primaryPicker.current.color.colors.RND.hsl.h +
                        ',' +
                        primaryPicker.current.color.colors.RND.hsl.s +
                        '%,' +
                        primaryPicker.current.color.colors.RND.hsl.l +
                        '%,' +
                        primaryPicker.current.color.colors.alpha +
                        ')';
                    _lc.setColor('primary', hslaString);
                }
            }
        });

        var secondaryPicker = jsColorPicker('input.secondaryColor',
        {
            customBG: '#222',
            readOnly: true,
            // patch: false,
            init: function(elm, colors) { // colors is a different instance (not connected to colorPicker)
                elm.style.backgroundColor = elm.value;
                elm.style.color = colors.rgbaMixCustom.luminance > 0.22 ? '#222' : '#ddd';
            },
            actionCallback: function(event, type) {
                if (type === 'changeXYValue') { // overwriting right after repaint...
                    var hslaString = 'hsla(' +
                        secondaryPicker.current.color.colors.RND.hsl.h +
                        ',' +
                        secondaryPicker.current.color.colors.RND.hsl.s +
                        '%,' +
                        secondaryPicker.current.color.colors.RND.hsl.l +
                        '%,' +
                        secondaryPicker.current.color.colors.alpha +
                        ')';
                    _lc.setColor('secondary', hslaString);
                }
            }
        });
    </script>
}

<div id="wall">
    <table id="tblWall" style="background-image: url('@Model.BackgroundImageUrl')">
        @for (int y = 0; y < 12; y++)
        {
            <tr class="@(y%2 == 1 ? "offset_row" : "row")">
                @for (int x = 0; x < 12; x++)
                {
                    var brick = Model.Bricks[x, y];
                    <td class="brick" id="c@(y*12 + x)" @if (brick.HasContent)
                                                        {<text>style="background-image: url('@brick.ThumbnailImageUrl')"</text>}></td>
                }
            </tr>
        }
    </table>
</div>
<div id="drawSpace"></div>
<div id="tools-wrapper" class="text-left" style="display: none">
    <div id="tools" class="container-fluid">
        <div class="row">
            <div class="col-xs-12 col-sm-1 col-md-1 col-lg-2">
                <button href="#" id="toolbar-dock" class="btn btn-primary"><span class="glyphicon glyphicon-chevron-down"></span></button>
                <button href="#" id="toolbar-size" class="btn btn-primary"><span class="glyphicon glyphicon-minus"></span></button>
            </div>
            <div class="col-xs-12 col-sm-11 col-md-11 col-lg-10">
                <div id="tools-inner" class="row">
                    <div class="col-xs-12 col-md-4 tool-group">
                        <button id="zoom-out" class="tool btn btn-sm btn-primary"><span class="glyphicon glyphicon-zoom-out"></span></button>
                        <button id="zoom-in" class="tool btn btn-sm btn-primary"><span class="glyphicon glyphicon-zoom-in"></span></button>
                        <button id="undo" class="tool btn btn-sm btn-primary"><span class="glyphicon glyphicon-chevron-left"></span></button>
                        <button id="redo" class="tool btn btn-sm btn-primary"><span class="glyphicon glyphicon-chevron-right"></span></button>
                        <button id="cancel-button" class="tool btn btn-sm btn-primary"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
                        <button id="save-button" class="tool btn btn-sm btn-primary"><span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span></button>
                    </div>
                    <div class="col-xs-12 col-md-4 tool-group">
                        <button id="tool-pencil" class="tool btn btn-sm btn-primary" style="background-image: url('/content/img/pencil.png')">&nbsp;</button>
                        <button id="tool-eraser" class="tool btn btn-sm btn-primary" style="background-image: url('/content/img/eraser.png')">&nbsp;</button>
                        <button id="tool-line" class="tool btn btn-sm btn-primary" style="background-image: url('/content/img/line.png')">&nbsp;</button>
                        <button id="tool-rectangle" class="tool btn btn-sm btn-primary" style="background-image: url('/content/img/rectangle.png')">&nbsp;</button>
                        <button id="tool-ellipse" class="tool btn btn-sm btn-primary" style="background-image: url('/content/img/ellipse.png')">&nbsp;</button>
                        <button id="tool-polygon" class="tool btn btn-sm btn-primary" style="background-image: url('/content/img/polygon.png')">&nbsp;</button>
                        <button id="tool-text" class="tool btn btn-sm btn-primary" style="background-image: url('/content/img/text.png')">&nbsp;</button>
                        <button id="tool-pan" class="tool btn btn-sm btn-primary" style="background-image: url('/content/img/pan.png')">&nbsp;</button>
                    </div>
                    <div class="col-xs-12 col-md-4 tool-group">
                        <input name="primaryColor" id="primaryColor" class="primaryColor tool btn btn-sm" readonly data-colormode="HEX" value="#000000" />
                        <input name="secondaryColor" id="secondaryColor" class="secondaryColor tool btn btn-sm" readonly data-colormode="HEX" value="#FFFFFF" />
                        <a id="stroke-1" class="tool btn btn-sm btn-primary" style="padding:0">
                            <svg version="1.1"><circle cx="16" cy="16" r="0.5" stroke="white" fill="white"></circle></svg>
                        </a>
                        <a id="stroke-2" class="tool btn btn-sm btn-primary" style="padding:0">
                            <svg version="1.1"><circle cx="16" cy="16" r="1" stroke="white" fill="white"></circle></svg>
                        </a>
                        <a id="stroke-3" class="tool btn btn-sm btn-primary" style="padding:0">
                            <svg version="1.1"><circle cx="16" cy="16" r="2.5" stroke="white" fill="white"></circle></svg>
                        </a>
                        <a id="stroke-4" class="tool btn btn-sm btn-primary" style="padding:0">
                            <svg version="1.1"><circle cx="16" cy="16" r="5" stroke="white" fill="white"></circle></svg>
                        </a>
                        <a id="stroke-5" class="tool btn btn-sm btn-primary" style="padding:0">
                            <svg version="1.1"><circle cx="16" cy="16" r="10" stroke="white" fill="white"></circle></svg>
                        </a>
                        <a id="stroke-6" class="tool btn btn-sm btn-primary" style="padding:0">
                            <svg  version="1.1"><circle cx="16" cy="16" r="15" stroke="white" fill="white"></circle></svg>
                        </a>
                    </div>
                    <div id="alert" class="alert alert-danger" style="display: none" role="alert">
                        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                        <span class="sr-only">Error:</span>
                        <span id="alert-message">Sorry! There was a problem saving the image... try again? :/</span>
                    </div>
                    <div id="progress" class="alert alert-default" style="display: none" role="alert">
                        <div id="progress-indicator"></div>
                        <div>I'm working on uploading this... just a sec...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@if (!Model.DontHelpMe)
{
    <div id="help" class="panel panel-default">
        <a href="#" id="help-close"><span class="glyphicon glyphicon-remove"></span></a>
        <div id="help-scroller" class="panel-body">
            <div class="container" id="help-question">
                <p class="text-center">It looks like it's your first time here... want a quick explanation?</p>
                <p class="text-center">
                    <a href="#" id="moreHelp">Yes please! <span class="glyphicon glyphicon-triangle-bottom"></span></a> |
                    <a href="#" id="noHelpThanks">No, I got this. <span class="glyphicon glyphicon-remove"></span></a>
                </p>
            </div>
            <div class="container">
                <div id="help-full" style="display: none"></div>
            </div>
        </div>
    </div>
}