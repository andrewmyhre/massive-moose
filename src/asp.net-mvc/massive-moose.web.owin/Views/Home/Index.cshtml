@model massive_moose.web.owin.Models.WallViewModel
@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Wall.cshtml";
}

@section stylesheets
{
    <link href="/content/literallycanvas.css" rel="stylesheet">
    <link href="/content/Wall.css" rel="stylesheet">
    <meta name="viewport" content="width=device-width,initial-scale=@System.Configuration.ConfigurationManager.AppSettings["ViewportScale"]"/>
    <style>
        .color {
	        padding: .5em;
	        margin-right: .4em;
	        border: 1px solid #aaa;
	        border-radius: 3px;
	        width: 140px;
        }
    </style>
}

@section scripts
{
    <!-- dependency: React.js -->
    <script src="/scripts/screenfull.js"></script>
    <script src="/scripts/literallycanvas/literallycanvas-core.min.js"></script>
    <script src="/scripts/mm.js"></script>
    <script src="/scripts/jsColorPicker.min.js"></script>
    <script type="text/javascript">
        MassiveMoose.initialize(
            {
                baseApiUrl: '@System.Configuration.ConfigurationManager.AppSettings["MMApi"]',
                drawZoom:@System.Configuration.ConfigurationManager.AppSettings["DrawZoom"],
                viewPortScaleWhenDrawing:@System.Configuration.ConfigurationManager.AppSettings["ViewportScaleWhenDrawing"],
                viewPortScale:@System.Configuration.ConfigurationManager.AppSettings["ViewportScale"],
                inviteCode:'@Model.InviteCode',
                toolbarShowDelay:300
            }
        );
    </script>
<script type="text/javascript">
    var foregroundColor = jsColorPicker('input.foregroundColor', {
            customBG: '#222',
            readOnly: true,
            // patch: false,
            init: function(elm, colors) { // colors is a different instance (not connected to colorPicker)
                elm.style.backgroundColor = elm.value;
                elm.style.color = colors.rgbaMixCustom.luminance > 0.22 ? '#222' : '#ddd';
            },
            actionCallback: function (event, type) {
                if (type === 'changeXYValue') { // overwriting right after repaint...
                    var hslaString = 'hsla(' +
                        foregroundColor.current.color.colors.RND.hsl.h +
                        ',' +
                        foregroundColor.current.color.colors.RND.hsl.s +
                        '%,' +
                        foregroundColor.current.color.colors.RND.hsl.l +
                        '%,' +
                        foregroundColor.current.color.colors.alpha +
                        ')';
                    _lc.setColor('primary',hslaString);
                }
            }
    });
</script>
}

<div id="wall">
    <table id="tblWall" style="background-image:url('@Model.BackgroundImageUrl')">
        @for (int y = 0; y < 12; y++)
        {
            <tr class="@(y%2==1?"offset_row":"row")">
                @for (int x = 0; x < 12; x++)
                {
                    var brick = Model.Bricks[x, y];
                    <td class="brick" id="c@(y*12 + x)" @if (brick.HasContent) {<text>style="background-image:url('@brick.ThumbnailImageUrl')"</text>}></td>
                }
            </tr>
        }
    </table>
</div>
<div id="drawSpace"></div>
<div id="tools-wrapper" style="display:none">
    <div id="tools">
        <input name="foregroundColor" id="foregroundColor" class="foregroundColor tool" readonly data-colormode="HEX" value="#000000"/>
        <a id="tool-pencil" class="tool" style="background-image: url('/content/img/pencil.png')"></a>
        <a id="tool-eraser" class="tool" style="background-image: url('/content/img/eraser.png')"></a>
        <a id="tool-line" class="tool" style="background-image: url('/content/img/line.png')"></a>
        <a id="tool-rectangle" class="tool" style="background-image: url('/content/img/rectangle.png')"></a>
        <a id="tool-ellipse" class="tool" style="background-image: url('/content/img/ellipse.png')"></a>
        <a id="tool-polygon" class="tool" style="background-image: url('/content/img/polygon.png')"></a>
        <a id="tool-text" class="tool" style="background-image: url('/content/img/text.png')"></a>
        <a id="tool-pan" class="tool" style="background-image: url('/content/img/pan.png')"></a>
        <a id="stroke-1" class="tool" style="position: relative; top: -7px">
            <div class="square-toolbar-button"><svg width="26" height="26" version="1.1"><circle cx="13" cy="13" r="0.5"></circle></svg>
            </div></a>
        <a id="stroke-2" class="tool" style="position: relative; top: -7px">
            <div class="square-toolbar-button"><svg width="26" height="26" version="1.1"><circle cx="13" cy="13" r="1"></circle></svg>
            </div></a>
        <a id="stroke-3" class="tool" style="position: relative; top: -7px">
            <div class="square-toolbar-button"><svg width="26" height="26" version="1.1"><circle cx="13" cy="13" r="2.5"></circle></svg>
            </div></a>
        <a id="stroke-4" class="tool" style="position: relative; top: -7px">
            <div class="square-toolbar-button"><svg width="26" height="26" version="1.1"><circle cx="13" cy="13" r="5"></circle></svg>
            </div></a>
        <a id="stroke-5" class="tool" style="position: relative; top: -7px">
            <div class="square-toolbar-button"><svg width="26" height="26" version="1.1"><circle cx="13" cy="13" r="10"></circle></svg>
            </div></a>
        <a id="stroke-6" class="tool" style="position: relative; top: -7px">
            <div class="square-toolbar-button"><svg width="26" height="26" version="1.1"><circle cx="13" cy="13" r="15"></circle></svg>
            </div></a>
        <a id="zoom-out" class="tool" style="position: relative; background-image: url('/content/img/zoom-out.png')"></a>
        <a id="zoom-in" class="tool" style="position: relative; background-image: url('/content/img/zoom-in.png')"></a>
        <a id="undo" class="tool" style="position: relative; top: -10px;"><span class="glyphicon glyphicon-chevron-left"></span></a>
        <a id="redo" class="tool" style="position: relative; top: -10px;"><span class="glyphicon glyphicon-chevron-right"></span></a>
        <button id="save-button" class="btn btn-primary btn-lg"><span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span></button>
        <button id="cancel-button" class="btn btn-primary btn-lg"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
        <div id="alert" class="alert alert-danger" style="display:none" role="alert">
            <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
            <span class="sr-only">Error:</span>
            <span id="alert-message">Sorry! There was a problem saving the image... try again? :/</span>
        </div>
    </div>
</div>

@if (!Model.DontHelpMe)
{
    <div id="help" class="panel panel-default">
        <a href="#" id="help-close"><span class="glyphicon glyphicon-remove"></span></a>
        <div id="help-scroller" class="panel-body">
            <div class="container" id="help-question">
                <p class="text-center">It looks like it's your first time here... want a quick explanation?</p>
                <p class="text-center">
                    <a href="#" id="moreHelp">Yes please! <span class="glyphicon glyphicon-triangle-bottom"></span></a> |
                    <a href="#" id="noHelpThanks">No, I got this. <span class="glyphicon glyphicon-remove"></span></a>
                </p>
            </div>
            <div class="container">
                <div id="help-full" style="display: none"></div>
            </div>
        </div>
    </div>
}